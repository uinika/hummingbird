{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","contentTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","String","htmlReplaceRegExp","$body","options","$tooltip","extend","config","split","enterAnimateCallback","scope","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","leave","$isShown","element","blur","tipElement","nodeName","forEach","triggers","on","toggle","unbindTriggerEvents","enter","i","length","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","rect","stopPropagation","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","document","documentElement","$window","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","test","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","tipScope","$destroy","$$phase","$options","$promise","$bsCompiler","compile","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","promise","then","init","container","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","link","clonedElement","safeDigest","version","minor","addClass","animation","$animate","customClass","$$rAF","$applyPlacement","focus","_blur","replace","elementPosition","autoPlace","autoToken","viewportPosition","originalPlacement","tipHeight","tipWidth","removeClass","tipPosition","applyPlacement","evt","preventDefault","fetchTemplate","fetchPromises","cache","$templateCache","res","isString","directive","$location","restrict","falseValueRegExp","transclusion","dataTarget","key","isDefined","hasOwnProperty","oldValue","tooltip","$observe","newValue","bsTooltip","$watch","isObject","bsShow","match","setViewport","$on","destroy"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if(options.keyboard) {\n              if(options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/top/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('top', 'bottom');\n            } else if (/bottom/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('bottom', 'top');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}