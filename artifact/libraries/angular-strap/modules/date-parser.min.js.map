{"version":3,"sources":["modules/date-parser.js"],"names":["angular","this","seconds","provider","$localeProvider","milliseconds","year","ParseDate","prototype","hours","value","array","isNumeric","i","isNaN","parseFloat","n","isFinite","indexOfCaseInsensitive","defaults","len","length","str","toString","toLowerCase","format","strict","DateParserFactory","minutes","day","month","getFullYear","getHours","getMilliseconds","getMonth","Date","getMinutes","proto","noop","toDate","$dateParser","regExpMap","sss","$get","options","$locale","dateFilter","mm","config","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","split","dateRegexParts","forEach","escapeReservedSymbols","text","join","replace","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valuesFunctionMap","valuesRegex","valueKey","valueFunction","setFnMap","push","exec","init","regex","m","extend","HH","H","hh","h","a","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","setSeconds","s","setMinutes","setHours","setDate","setMonth","match","setFullYear","setMap","regExpForFormat","$format","test","baseDate","formatRegex","formatSetMap","matches","date","getTime","timezone","newDate","parseInt","fromDate","call","getDate","today","getDateForAttribute","key","isString","substr","getTimeForAttribute","time","daylightSavingAdjust","Infinity","parse","timezoneOffsetAdjust","undo","getTimezoneOffset"],"mappings":"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","file":"modules/date-parser.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat(format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex(format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          }\n          else {\n            // Abstract replaces to avoid collisions\n            for(var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral(text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars(text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for(var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat(format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch, keyIndex, valueKey, valueFunction;\n        var valuesFunctionMap = [];\n\n        while((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n"],"sourceRoot":"/source/"}